import time,subprocess,os,sys
from app.crud import update_task_status, update_task_result

'''
Description: 
    This is the main routine that implements a task. It has a 
    couple of modes of operation:

    - if a python script file 'tasks/{task_id}.py' exists, it will spawn it 
    in a subprocess. 
    - otherwise it will just sleep for 'duration' secs and return COMPLETED
    
    The {task_id}.py file should follow a standard
    format:

    def task(task_id: str):
        update_task_status(task_id, "RUNNING")
        try:
        
            # do something interesting here and set result str...

            result = ... 

            update_task_status(task_id, "COMPLETED")
            update_task_result(task_id, result)
        except Exception as e:
            update_task_status(task_id, "FAILED")
            update_task_status(task_id, str(e))

    NOTE: A template for this file is generated by scripts/new-task.sh

'''
def run_task(task_id: str, duration: int):

    filepath = "tasks/"+task_id+".py"

    if os.path.exists(filepath):
        # run the python script...
        result = subprocess.run(
            [sys.executable, filepath],
            capture_output=True,
            text=True
        )
        if result.stdout:
            update_task_result(task_id, result)
            update_task_status(task_id, "COMPLETED")
        else:
            update_task_result(task_id, result.stderr)
            update_task_status(task_id, "FAILED")
    else:
        # just sleep for 'duration' secs...
        update_task_status(task_id, "RUNNING")
        try:
            time.sleep(duration)  # Simulate long task
            result = f"Task completed in {duration} seconds."
            update_task_status(task_id, "COMPLETED")
            update_task_result(task_id, result)
        except Exception as e:
            update_task_status(task_id, "FAILED")
            update_task_status(task_id, str(e))


